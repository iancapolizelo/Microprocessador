--Trabalho realizado por: Gustavo Henrique Zeni e Ianca Polizelo

Codificação as instruções:

0000 000000000000 - nop
0001 rrr000XXXrrr - add Ra, Rb : salva no Ra (add <ea>y, Dx - Source + Destination -> Destination);
0010 rrrXnnnnnnnn - addq Ra, n : salva no Ra (addq #<data>, Dx - Data + Destination -> Destination);
0011 rrr000XXXrrr - sub Ra, Rb : salva no Ra (sub <ea>y, Dx - Source - Destination -> Destination);
0100 rrrXnnnnnnnn - subq Ra, n : salva no Ra (subq #<data>, Dx - Data - Destination -> Destination);
0101 rrrXnnnnnnnn - bcc Ra, n : compara Ra <= n : salva em Ra se é 0 ou 1
100f 0000nnnnnnnn - jump relativo
1111 0000nnnnnnnn - jump 

Legenda:

f: 0 - Z; 1 - C
Z: flag zero
C: flag carry
r: registrador (0-7)
n: constante
X: ignorado

Programa a ser realizado na ROM:

1. Carrega R3 (o registrador 3) com o valor 0
2. Carrega R4 com 0
3. Soma R3 com R4 e guarda em R4
4. Soma 1 de R3
5. Se R3<30 salta para a instrução do passo 3*
6. Copia valor de R4 para R5

*Requisito obrigatório: o salto para trás deve ser relativo

1: addq 011, 00000000 : addq R3, 0 --0

2: addq 100, 00000000 : addq R4, 0 --1

3: add 100, 011 : add R4, R3 --2

4: addq 011, 00000001 : addq R3, 1 --3

5: Aqui vamos ter que fazer o seguinte:

	
	bcc 011, 00011110 : bcc R3, 30 --4
	jump_r 1, 11111101 : jump relativo -3 --5

6: sub 101, 101 : sub R5, R5
	add 101, 100 : add R5, R4 --6

00000011
11111100
11111101




